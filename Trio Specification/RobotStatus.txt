class RobotStatus

	temporal domain integer;

	visible targetCartSpeed, targetEndEffectorSpeed, binEmpty, binFull, addPieceToBin, removePieceFromBin, currentCartSpeed, currentEndEffectorSpeed;

	TD items:
		predicates
			binEmpty(),
			binFull(),
			addPieceToBin(),
			removePieceFromBin();

		vars
			targetCartSpeed({None, Low, Normal}),
			currentCartSpeed({None, Low, Normal}),
			targetEndEffectorSpeed({None, Low, Normal}),
			currentEndEffectorSpeed({None, Low, Normal}),
			binStatus({Empty, 1, 2, Full});

	axioms

		-- bin empty
		binEmpty() \iff binStatus == Empty;

		-- bin full
		binFull() \iff binStatus == Full;

		-- ordering of bin status
		binStatus == Empty && addPieceToBin() \implies \exists x (Becomes(binStatus == 1, x));
		binStatus == 1 && addPieceToBin() \implies \exists x (Becomes(binStatus == 2, x));
		binStatus == 2 && addPieceToBin() \implies \exists x (Becomes(binStatus == Full, x));
		binStatus == Full && removePieceFromBin() \implies \exists x (Becomes(binStatus == 2, x));
		binStatus == 2 && removePieceFromBin() \implies \exists x (Becomes(binStatus == 1, x));
		binStatus == 1 && removePieceFromBin() \implies \exists x (Becomes(binStatus == Empty, x));

		-- a piece can be added to the local bin only if there is enough capacity
		addPieceToBin() \implies \neg binStatus == Full;

		-- a piece can be removed from the local bin only if there is at least one in the bin
		removePieceFromBin() \implies \neg binStatus == Empty;

		-- binStatus is unique at each instant
		uniqueBinStatus: \forall x \forall y (binStatus(x) && x != y \implies \neg binStatus(y));

		-- addPieceToBin() and removePieceFromBin() are instantaneous events
		singleInstantEvents:
		(addPieceToBin() \implies Futr(\neg addPieceToBin(), 1));
		(removePieceFromBin() \implies Futr(\neg removePieceFromBin(), 1));

		-- binStatus stays constant if there is no action performed
		constantBin: \forall x (binStatus(x) && \neg (addPieceToBin() || removePieceFromBin()) \implies Futr(binStatus(x), 1));

		-- define the relation between current and target speed
		cartSpeedRelation: \forall x targetCartSpeed(x) \implies Fut(currentCartSpeed(x),1);
		armSpeedRelation: \forall x targetEndEffectorSpeed(x) \implies Fut(currentEndEffectorSpeed(x),1);



end RobotStatus.