-- The robot has a center position, and from that position it can be present only in
-- adjacent areas from the center. The Position predicate represent these adjacent
-- position, while the center predicate specify the current central position of the robot.
-- Another condition we need to supply is the fact that the robot cannot "teleport".
-- This condition is guaranteed by the fact that any new position that the robot assumes
-- must be adjacent to at least one position of the robot in the past.


class RobotCartPositionSensor; 
	inherits PositionSensor
	
	visible center;
	
	temporal domain integer;
	
	TD items:
		predicates
			center({ L1, L2, L3, L4, L5, L6, L7, L8, L9,
			     L10, L11, L12, L13, L14, L15, L16, L17, L18, L19,
			     L20, L21, L22, L23, L24, L25, L26, L27, L28});
	
	axioms
	
		-- The center is unique
		centerUnique: \forall x (center(x) \implies (\forall y (y != x \implies \neg center(y))))			

		-- The center of the robot must be in one of the position occupied by the robot
		centerInRobot: \forall x (center(x) \implies position(x));

		-- Each area that is occupied by the robot must be adjacent to the center
		positionRelativeToCenter:
			\forall y forall x (center(y) \implies (position(x) \iff adjacent(x, y));

		-- Each position that is occupied by the robot is either adjacent to another position or is adjacent to a position that is adjacent to that one
		maximumDistancePosition: \forall x \forall y (position(x) && position(y) \implies
			adjacent(x, y) || \exists z (position(z) && adjacent(x, z) && adjacent(z, y)));
			
		-- The Position predicate can be true only for areas adjacent to the center
		positionAdjacent:
			\forall x (position(x) -> \exists y (center(y) && adjacent(center(y), position(x)) ) )
		
		-- An area occupied by the robot must be adjacent with an area occupied by the robot in the past
		doNotTeleport:
			\forall x (Becomes(position(x)) \implies \exists y (Past(position(y), 1) && adjacent(x, y)));
			
end RobotCartPositionSensor.