class RobotController
	-- RobotController needs to ensure that
	-- 1. the contacts between Operator and Robot can happen only when the Robot is still or is moving very slowly
	-- 1.1. a contact between Operator's head and Robot can happen only when the Robot is still
	-- 1.2. a contact between Operator's arm and Robot can happen only when the speed is slow
	-- 1.3. a contact between Operator's body and Robot can happen only when the speed is slow
	-- 2. the Robot needs to avoid to entrap the Operator between itself and a wall
	
	-- TODO: missing the exported variables
 
	temporal domain integer;
	

	TD items

		predicates
			do({
				PickUpFromShelf,
				DropToLocalBin,
				GoToWorkingArea,
				PickFromLocalBin,
				DropToTombstone,
				PickFromTombstone,
				DropToConveyorBelt,
				GoToShelfArea
			});

		variables
			currentAction({
				PickUpFromShelf,
				DropToLocalBin,
				GoToWorkingArea,
				PickFromLocalBin,
				DropToTombstone,
				PickFromTombstone,
				DropToConveyorBelt,
				GoToShelfArea
			}),
			
			-- None -> Proceed normally with the execution
			-- Emergency -> Stop the robot and wait for the HDICommand to return to None
			-- Continue -> when the robot has placed a piece on the tombstone, it needs to wait for the lavoration to be done and for the operator to signal that the lavoration has terminated.

			HDICommand({
				None,
				Emergency,
				Continue 
			});

		modules RobotStatus;

		axioms
			vars t: real;

			-- the actions must be done in the correct order
			correctActionOrder:
			(currentAction == PickUpFromShelf => Until(currentAction == PickUpFromShelf, currentAction == DropToLocalBin))
			&&  
			-- why the first until? we have to suppose the shelf is always full
			(currentAction == DropToLocalBin => (Until(currentAction == DropToLocalBin, currentAction == GoToShelfArea) ||
												    Until(currentAction == DropToLocalBin, currentAction == PickUpFormShelf) ||
													Until(currentAction == DropToLocalBin, currentAction == GoToWorkingArea)))
			&&
			(currentAction == GoToWorkingArea => (Until(currentAction == GoToWorkingArea, currentAction == PickFromLocalBin)))
			&&
			(currentAction == PickFromLocalBin => Until(currentAction == PickFromLocalBin, currentAction == DropToTombstone))
			&&
			(currentAction == DropToTombstone => Until(currentAction == DropToTombstone, currentAction = PickFromTombstone))
			&&
			(currentAction == PickFromTombstone => Until(currentAction == PickFromTombstone, currentAction = DropToConveyorBelt))
			&&
			(currentAction == DropToConveyorBelt => Until(currentAction == DropToConveyorBelt, currentAction == PickFromLocalBin) ||
														  Until(currentAction == DropToConveyorBelt, currentAction == GoToShelfArea))
			&&
			(currentAction == GoToShelfArea => Until(currentAction == GoToShelfArea, currentAction == PickUpfromShelf);

			-- the change in currentAction must be preceded by a do request
			correctInit:
			\forall x (Becomes(currentAction == x) \iff do(x));

			-- during emergency mode, the robot needs to be stopped immediately
			emergencyMode: (HDICommand == Emergency) => (RobotStatus.TargetCartSpeed == None) && (RobotStatus.TargetEndEffectorSpeed == None);

			-- do is an instantaneous event (lasts only one time instant)
			instantaneousDo: \forall x (do(x) => Futr(\neg do(x), 1));

			-- precondition of PickUpFromShelf is that the robot has space in the local bin and is at the shelf
			prePickUpFromShelf:
				Becomes(currentAction == PickUpFromShelf) => \neg RobotStatus.binFull() && atShelf

			-- DropToLocalBin requires the robot to be holding a piece and the local bin not to be full
			preDropToLocalBin:
				Becomes(currentAction == DropToLocalBin) => \neg RobotStatus.binFull() && RobotStatus.holding();

			-- GoToWorkingArea requires the robot to have the local bin full and not hold any piece
			preGoToWorkingArea:
				Becomes(currentAction == GoToWorkingArea) => RobotStatus.binFull() && \neg RobotStatus.holding();
			
			-- precondition for the currentAction to be PickFromLocalBin,DropToTombstone,PickFromTomstone, DropToConveyorBelt is that R is at the WA
			preActionsAtWorkingArea:
				(Becomes(currentAction == PickFromLocalBin) => atWorkingArea) &&
				(Becomes(currentAction == DropToTombstone) => atWorkingArea) &&
				(Becomes(currentAction == PickFromTomstone) => atWorkingArea) &&
				(Becomes(currentAction == DropToConveyorBelt) => atWorkingArea) &&
			
			-- precondition for the currentAction to be PickFromLocalBin is that the local bin is not empty
				Becomes(currentAction == PickFromLocalBin) => \neg RobotStatus.binEmpty() && \neg RobotStatus.holding();
			
			-- precondition for the currentAction to be PickFromTombstone is that the WP is finished
			TODO
			
			-- precondition for the currentAction to be GoToShelfArea is that the local bin is empty
			preGoToShelfArea:
				Becomes(currentAction == GoToShelfArea) => RobotStatus.binEmpty() && \neg RobotStatus.holding();

			-- when the bin is full, the robot must go to the tombstone
			binIsFull:
				Becomes(RobotStatus.binFull()) \implies do(GoToWorkingArea);
end RobotController.